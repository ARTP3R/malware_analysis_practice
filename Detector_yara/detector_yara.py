import requests, zipfile, os, shutil, glob, yara

def create(folder):
	if not os.path.exists(folder):
		os.mkdir(folder)

def copyfiles(src, dst):
	for root, dirs, files in os.walk(src):
		for filename in files:
			if ('.yara' in filename or '.yar' in filename):
				shutil.copy(os.path.join(root, filename), os.path.join(dst, filename))

def unzip(filename, dst):
	with zipfile.ZipFile(filename, 'r') as zip_ref:
		zip_ref.extractall(dst)

def download(dst, path):
	r = requests.get(path)
	open(dst, 'wb').write(r.content)

def compile(filepaths, save_folder):
	compiled_rules = dict()
	for folder in filepaths:
		for filename in glob.glob(folder + '/*.yar'):
			#nombre del fichero sin extensión
			namespace = os.path.basename(os.path.splitext(filename)[0])
			# diccionario 
			compiled_rules[namespace] = filename
	rules = yara.compile(filepaths = compiled_rules)
	if os.path.exists(save_folder):
		os.remove(save_folder)
	rules.save(save_folder)

root = os.path.dirname(os.path.abspath(__file__))
# Directorio donde se meten todas las reglas a compilar
compiled_rules = os.path.join(root, "rules-compiled") 

# Zip filename (nombres tal como vienen del repositorio)
cape_filename = os.path.join(root, 'CAPEv2.zip')
reversingLabs_filename = os.path.join(root, 'reversinglabs-yara-rules-develop.zip')
ATResearch_filename = os.path.join(root, 'Yara-Rules-master.zip')
icewater_filename = os.path.join(root, 'Icewater-master.zip')
bartblaze_filename = os.path.join(root, 'Yara-rules-master.zip')
malpediaSignator_filename = os.path.join(root, 'signator-rules-main.zip')
abhinavbom_filename = os.path.join(root, 'Yara-Rules-master.zip')


# Folder unzip
capev2_folder = os.path.join(root, 'CAPEv2-master')
yara_cape_folder = os.path.join(root, 'CAPEv2-master', 'data', 'yara', 'CAPE')
reversingLabs_folder = os.path.join(root, 'reversinglabs-yara-rules-develop')
ATResearch_folder = os.path.join(root, 'Yara-Rules-master')
icewater_folder = os.path.join(root, 'Icewater-master')
bartblaze_folder = os.path.join(root, 'Yara-rules-master')
malpediaSignator_folder = os.path.join(root, 'signator-rules-main')
abhinavbom_folder = os.path.join(root, 'Yara-Rules-master')

# Local folders
local_cape_folder = os.path.join(root, 'rules', 'CAPE')
local_reversingLabs_folder = os.path.join(root, 'rules', 'reversingLabs')
local_ATResearch_folder = os.path.join(root, 'rules', 'ATResearch')
local_icewater_folder = os.path.join(root, 'rules', 'icewater')
local_bartblaze_folder = os.path.join(root, 'rules', 'bartblaze')
local_malpediaSignator_folder = os.path.join(root, 'rules', 'malpediaSignator')
local_abhinavbom_folder = os.path.join(root, 'rules', 'abhinavbom')

# Directories to compile
directories = [
	local_cape_folder,
	local_reversingLabs_folder,
	local_ATResearch_folder,
	local_icewater_folder,
#	local_bartblaze_folder,
	local_malpediaSignator_folder,
	local_abhinavbom_folder]


# CAPEv2
download(dst=cape_filename, path='https://codeload.github.com/kevoreilly/CAPEv2/zip/refs/heads/master')
unzip(filename=cape_filename, dst=root)
create(folder=local_cape_folder)
shutil.copytree(src=yara_cape_folder, dst=local_cape_folder, dirs_exist_ok=True)
shutil.rmtree(capev2_folder)
os.remove(cape_filename)

# ReversingLabs
download(dst=reversingLabs_filename, path='https://codeload.github.com/reversinglabs/reversinglabs-yara-rules/zip/refs/heads/develop')
unzip(filename=reversingLabs_filename, dst=root)
create(folder=local_reversingLabs_folder)
copyfiles(reversingLabs_folder, local_reversingLabs_folder)
shutil.rmtree(reversingLabs_folder)
os.remove(reversingLabs_filename)

# advanced-threat-research https://github.com/advanced-threat-research/Yara-Rules
download(dst=ATResearch_filename, path='https://codeload.github.com/advanced-threat-research/Yara-Rules/zip/refs/heads/master')
unzip(filename=ATResearch_filename, dst=root)
create(folder=local_ATResearch_folder)
copyfiles(ATResearch_folder, local_ATResearch_folder)
shutil.rmtree(ATResearch_folder)
os.remove(ATResearch_filename)

# icewater https://github.com/SupportIntelligence/Icewater
download(dst=icewater_filename, path='https://codeload.github.com/SupportIntelligence/Icewater/zip/refs/heads/master')
unzip(filename=icewater_filename, dst=root)
create(folder=local_icewater_folder)
copyfiles(icewater_folder, local_icewater_folder)
shutil.rmtree(icewater_folder)
os.remove(icewater_filename)

# bartblaze https://github.com/bartblaze/Yara-rules
download(dst=bartblaze_filename, path='https://codeload.github.com/bartblaze/Yara-rules/zip/refs/heads/master')
unzip(filename=bartblaze_filename, dst=root)
create(folder=local_bartblaze_folder)
copyfiles(bartblaze_folder, local_bartblaze_folder)
shutil.rmtree(bartblaze_folder)
os.remove(bartblaze_filename)

# malpediaSignator https://github.com/malpedia/signator-rules
download(dst=malpediaSignator_filename, path='https://codeload.github.com/malpedia/signator-rules/zip/refs/heads/main')
unzip(filename=malpediaSignator_filename, dst=root)
create(folder=local_malpediaSignator_folder)
copyfiles(malpediaSignator_folder, local_malpediaSignator_folder)
shutil.rmtree(malpediaSignator_folder)
os.remove(malpediaSignator_filename)


# abhinavbom https://github.com/abhinavbom/Yara-Rules
download(dst=abhinavbom_filename, path='https://codeload.github.com/abhinavbom/Yara-Rules/zip/refs/heads/master')
unzip(filename=abhinavbom_filename, dst=root)
create(folder=local_abhinavbom_folder)
copyfiles(abhinavbom_folder, local_abhinavbom_folder)
shutil.rmtree(abhinavbom_folder)
os.remove(abhinavbom_filename)

# COMPILACIÓN DE TODO
compile(directories, compiled_rules)


